/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-activate.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : activate
 #	author : miyako
 #	2020/02/14
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-activate.h"

#pragma mark -

static bool wasMDI;

static bool isSDI() {
    
#if VERSIONWIN
    
    PA_Variable args[5];

    args[0] = PA_CreateVariable(eVK_Longint);
    args[1] = PA_CreateVariable(eVK_Longint);
    args[2] = PA_CreateVariable(eVK_Longint);
    args[3] = PA_CreateVariable(eVK_Longint);
    args[4] = PA_CreateVariable(eVK_Longint);
    
    PA_SetLongintVariable(&args[4], (PA_long32)-1);

    PA_ExecuteCommandByID(443 /*GET WINDOW RECT*/, args, 5);

    return (
       (PA_GetLongintVariable(args[0]) == 0)
    && (PA_GetLongintVariable(args[1]) == 0)
    && (PA_GetLongintVariable(args[2]) == 0)
    && (PA_GetLongintVariable(args[3]) == 0));
    
    /* the variable belongs to 4D, no need to PA_ClearVariable (I think) */

#endif
    
    return false;
}

#if VERSIONWIN

static HWND getMDI() {
    
    wasMDI = true;

    PA_ulong32 version = PA_Get4DVersion();
    
    if (version >= 16)
        return (HWND)PA_GetMainWindowHWND();

    // Altura MAc2Win does not allow multiple instances of the same app
    // we can assume that the window class is the folder name of the application
    
    HWND mdi = NULL;
    wchar_t path[_MAX_PATH] = { 0 };
    wchar_t * applicationPath = wcscpy(path, (const wchar_t *)PA_GetApplicationFullPath().fString);
    
    //remove file name (4D.exe)
    PathRemoveFileSpec(path);
    //check instance as well, to be sure
    HINSTANCE h = (HINSTANCE)PA_Get4DHInstance();
    
    do {
        mdi = FindWindowEx(NULL, mdi, (LPCTSTR)path, NULL);
        if (mdi)
        {
            if (h == (HINSTANCE)GetWindowLongPtr(mdi, GWLP_HINSTANCE))
            {
                break;
            }
        }
    } while (mdi);
    
   return mdi;
}

#endif

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
    try
    {
        switch(selector)
        {                
                // --- activate
                
            case 1 :
                ACTIVATE_4D(params);
                break;
                
        }
        
    }
    catch(...)
    {
        
    }
}

#pragma mark -

#if VERSIONWIN
void activate_window(HWND m_hWnd) {
	/*
	https://stackoverflow.com/questions/916259/win32-bring-a-window-to-top
	*/
	HWND hCurWnd = ::GetForegroundWindow();
	DWORD dwMyID = ::GetCurrentThreadId();
	DWORD dwCurID = ::GetWindowThreadProcessId(hCurWnd, NULL);
	::AttachThreadInput(dwCurID, dwMyID, TRUE);
	//::ShowWindowAsync(m_hWnd, SW_RESTORE);
	::ShowWindow(m_hWnd, SW_RESTORE);
	::SetWindowPos(m_hWnd, HWND_TOPMOST, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE);
	::SetWindowPos(m_hWnd, HWND_NOTOPMOST, 0, 0, 0, 0, SWP_SHOWWINDOW | SWP_NOSIZE | SWP_NOMOVE);
	::SetForegroundWindow(m_hWnd);
	::SetFocus(m_hWnd);
	::SetActiveWindow(m_hWnd);
	::AttachThreadInput(dwCurID, dwMyID, FALSE);
}
#endif

void ACTIVATE_4D(PA_PluginParameters params) {
    
#if VERSIONMAC
    [[NSRunningApplication currentApplication]activateWithOptions:NSApplicationActivateIgnoringOtherApps];
#endif
    
#if VERSIONWIN
    
    HWND mdi = getMDI();
    
    if (mdi) {
        PA_RunInMainProcess((PA_RunInMainProcessProcPtr)activate_window, mdi);
    }else{
        
        PA_WindowRef windowRef = reinterpret_cast<PA_WindowRef>(PA_GetLongParameter(params, 1));
        
        HWND window = reinterpret_cast<HWND>(PA_GetHWND(windowRef));
        
        if (window) {
            PA_RunInMainProcess((PA_RunInMainProcessProcPtr)activate_window, window);
        }
        
    }
#endif
}
